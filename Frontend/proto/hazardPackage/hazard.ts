// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "hazard.proto" (package "hazard", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Message sent from mobile to Go server with image data
 *
 * @generated from protobuf message hazard.ImageRequest
 */
export interface ImageRequest {
    /**
     * @generated from protobuf field: bytes image_data = 1
     */
    imageData: Uint8Array; // Raw image bytes (JPEG/PNG)
    /**
     * @generated from protobuf field: double latitude = 2
     */
    latitude: number; // GPS latitude (optional)
    /**
     * @generated from protobuf field: double longitude = 3
     */
    longitude: number; // GPS longitude (optional)
}
/**
 * Response message from Go server with detection results
 *
 * @generated from protobuf message hazard.DetectionResponse
 */
export interface DetectionResponse {
    /**
     * @generated from protobuf field: string hazard_type = 1
     */
    hazardType: string; // e.g., "Pothole", "Debris"
    /**
     * @generated from protobuf field: float confidence = 2
     */
    confidence: number; // Confidence score of detection (0.0 - 1.0)
    /**
     * @generated from protobuf field: int32 priority = 3
     */
    priority: number; // Priority level: High=3, Medium=2, Low=1
}
// @generated message type with reflection information, may provide speed optimized methods
class ImageRequest$Type extends MessageType<ImageRequest> {
    constructor() {
        super("hazard.ImageRequest", [
            { no: 1, name: "image_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<ImageRequest>): ImageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.imageData = new Uint8Array(0);
        message.latitude = 0;
        message.longitude = 0;
        if (value !== undefined)
            reflectionMergePartial<ImageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageRequest): ImageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes image_data */ 1:
                    message.imageData = reader.bytes();
                    break;
                case /* double latitude */ 2:
                    message.latitude = reader.double();
                    break;
                case /* double longitude */ 3:
                    message.longitude = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes image_data = 1; */
        if (message.imageData.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.imageData);
        /* double latitude = 2; */
        if (message.latitude !== 0)
            writer.tag(2, WireType.Bit64).double(message.latitude);
        /* double longitude = 3; */
        if (message.longitude !== 0)
            writer.tag(3, WireType.Bit64).double(message.longitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hazard.ImageRequest
 */
export const ImageRequest = new ImageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetectionResponse$Type extends MessageType<DetectionResponse> {
    constructor() {
        super("hazard.DetectionResponse", [
            { no: 1, name: "hazard_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "confidence", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DetectionResponse>): DetectionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hazardType = "";
        message.confidence = 0;
        message.priority = 0;
        if (value !== undefined)
            reflectionMergePartial<DetectionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetectionResponse): DetectionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hazard_type */ 1:
                    message.hazardType = reader.string();
                    break;
                case /* float confidence */ 2:
                    message.confidence = reader.float();
                    break;
                case /* int32 priority */ 3:
                    message.priority = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetectionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hazard_type = 1; */
        if (message.hazardType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hazardType);
        /* float confidence = 2; */
        if (message.confidence !== 0)
            writer.tag(2, WireType.Bit32).float(message.confidence);
        /* int32 priority = 3; */
        if (message.priority !== 0)
            writer.tag(3, WireType.Varint).int32(message.priority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hazard.DetectionResponse
 */
export const DetectionResponse = new DetectionResponse$Type();
/**
 * @generated ServiceType for protobuf service hazard.HazardDetection
 */
export const HazardDetection = new ServiceType("hazard.HazardDetection", [
    { name: "DetectHazard", options: {}, I: ImageRequest, O: DetectionResponse }
]);
