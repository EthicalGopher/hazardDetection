// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "hazard.proto" (package "hazard", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HazardDetection } from "./hazard";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DetectionResponse } from "./hazard";
import type { ImageRequest } from "./hazard";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service definition for hazard detection
 *
 * @generated from protobuf service hazard.HazardDetection
 */
export interface IHazardDetectionClient {
    /**
     * DetectHazard receives an image from the mobile device
     * and returns hazard detection results.
     *
     * @generated from protobuf rpc: DetectHazard
     */
    detectHazard(input: ImageRequest, options?: RpcOptions): UnaryCall<ImageRequest, DetectionResponse>;
}
/**
 * Service definition for hazard detection
 *
 * @generated from protobuf service hazard.HazardDetection
 */
export class HazardDetectionClient implements IHazardDetectionClient, ServiceInfo {
    typeName = HazardDetection.typeName;
    methods = HazardDetection.methods;
    options = HazardDetection.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * DetectHazard receives an image from the mobile device
     * and returns hazard detection results.
     *
     * @generated from protobuf rpc: DetectHazard
     */
    detectHazard(input: ImageRequest, options?: RpcOptions): UnaryCall<ImageRequest, DetectionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ImageRequest, DetectionResponse>("unary", this._transport, method, opt, input);
    }
}
